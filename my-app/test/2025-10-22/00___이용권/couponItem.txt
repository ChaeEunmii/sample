'use client';

import clsx from 'clsx';
import { Text, IconButton, Checkbox, Flag, ButtonArea, Button } from '@shared/ui';
import { formatDate } from '@/shared/utils/ui';
import styles from './CouponItem.module.scss'; // ✅ 전용 스타일 분리

// 쿠폰상태, 플래그설정
export type CouponStatus = 'waiting' | 'used' | 'expired' | 'cancel_apply' | 'cancel_completed';
export const couponStatusLabelMap: Record<CouponStatus, string> = {
  waiting: '사용대기',
  used: '사용완료',
  expired: '기간만료',
  cancel_apply: '취소요청',
  cancel_completed: '취소완료',
};
const couponStatusColorMap: Record<CouponStatus, 'gray4' | 'dark2'> = {
  waiting: 'gray4',
  used: 'dark2',
  expired: 'dark2',
  cancel_apply: 'gray4',
  cancel_completed: 'dark2',
};

// 선택불가한 상태(체크박스 사용시 비활성화 설정)
export const isUnselectableStatus = (status?: CouponStatus, due?: string) => {
  if (status === 'used' || status === 'cancel_apply' || status === 'cancel_completed') return true;

  if (status === 'expired') {
    if (!due) return true;
    const formattedDue =
      due.length === 8 ? `${due.slice(0, 4)}-${due.slice(4, 6)}-${due.slice(6, 8)}` : due;
    const diff = Date.now() - new Date(formattedDue).getTime();
    const fiveYears = 5 * 365 * 24 * 60 * 60 * 1000;
    return diff > fiveYears || isNaN(diff);
  }
  return false;
};

// 쿠폰 데이터 타입
export interface CouponsData {
  id: string;
  number: string;
  start?: string;
  due?: string;
  status?: CouponStatus;
  sentRemain?: number;
}

export interface CouponItemProps {
  /** 모드 설정 (기본목록, 체크박스선택) */
  mode?: 'default' | 'select';
  /** 단일 쿠폰 데이터 */
  coupon: CouponsData;
  /** 표시용 인덱스 */
  index: number;
  /** 체크박스 상태 관리 */
  selection?: {
    selectedIds: (string | number)[];
    onChange: (id: string | number, isSelected: boolean) => void;
    disabledIds?: (string | number)[];
  };
  /** 버튼 클릭핸들러 */
  onResendClick?: (coupon: CouponsData, index: number) => void;
  onExtendClick?: (coupon: CouponsData, index: number) => void;
  onCancelDetailClick?: (coupon: CouponsData, index: number) => void;
}

/**
 * 단일 쿠폰 아이템 렌더 컴포넌트
 */
export const CouponItem = ({
  mode = 'default',
  coupon,
  index,
  selection,
  onResendClick,
  onExtendClick,
  onCancelDetailClick,
}: CouponItemProps) => {
  // 상태, 플래그
  const status: CouponStatus = coupon.status ?? 'waiting';
  const flagMeta = {
    color: couponStatusColorMap[status],
    label: couponStatusLabelMap[status],
  };

  // 비활성 스타일조건
  const isDisabled = status === 'cancel_completed';

  // 버튼 노출 조건들
  const showCancelDetailBtn = status === 'cancel_apply' || status === 'cancel_completed';
  const canResend = typeof coupon.sentRemain === 'number' && coupon.sentRemain > 0;
  const showCouponResentBtns = !showCancelDetailBtn && status !== 'expired' && canResend;
  const showRangeBtns = status === 'expired';
  const showActions = mode !== 'select';

  // 체크박스 상태 설정
  const id = coupon.id ?? coupon.number;
  const isUnselectable = isUnselectableStatus(status, coupon.due);
  const isSelected = selection?.selectedIds.includes(id) ?? false;
  const disabled = isUnselectable || !!selection?.disabledIds?.includes(id);

  return (
    <>
      <div className={styles.couponItem}>
        <div className={styles.topInfo}>
          <div className={styles.title}>
            {mode === 'select' ? (
              <Checkbox
                label={<span className={styles.checkLabel}>쿠폰 {index + 1}</span>}
                checked={!isUnselectable && isSelected}
                disabled={disabled}
                onChange={(e) => selection?.onChange(id, e.target.checked)}
                className={clsx(styles.check, isDisabled && styles.checkDisabled)}
              />
            ) : (
              <Text as="span" indent className={clsx(styles.label, isDisabled && styles.disabled)}>
                쿠폰 {index + 1}
              </Text>
            )}
          </div>
          <Flag data={flagMeta} />
        </div>

        <div className={clsx(styles.number, isDisabled && styles.disabled)}>
          <Text as="span" size="5" indent>
            {coupon.number}
          </Text>
          <IconButton
            name="copy"
            size="small"
            onClick={() => navigator.clipboard?.writeText(coupon.number)}
            aria-label="쿠폰번호 복사"
          >
            복사하기
          </IconButton>
        </div>

        {(coupon.start || coupon.due) && (
          <div className={clsx(styles.range, isDisabled && styles.disabled)}>
            <Text as="span" size="4" color="gray2">
              유효기간
            </Text>
            <Text as="span" size="4" color="gray2">
              {formatDate(coupon.start, 'dot')}~{formatDate(coupon.due, 'dot')}
            </Text>
          </div>
        )}
      </div>

      {showActions && (
        <ButtonArea className={styles.btns}>
          {showCouponResentBtns && (
            <Button variant="tertiary" onClick={() => onResendClick?.(coupon, index)}>
              {`쿠폰 재발송(${coupon.sentRemain}회 남음)`}
            </Button>
          )}
          {showRangeBtns && (
            <Button variant="tertiary" onClick={() => onExtendClick?.(coupon, index)}>
              기간연장
            </Button>
          )}
          {showCancelDetailBtn && (
            <Button variant="tertiary" onClick={() => onCancelDetailClick?.(coupon, index)}>
              취소 상세
            </Button>
          )}
        </ButtonArea>
      )}
    </>
  );
};