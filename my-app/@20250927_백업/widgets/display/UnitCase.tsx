'use client';

import { useState } from 'react';
import { TitleBar } from '@shared/ui';
import { ProdCard, ProdCardList } from '@widgets/product';

// ÏûÑÏãú Îç∞Ïù¥ÌÑ∞
import { mockProdCards, mockProdCase, mockProdSimpleCase } from '@mocks/product';

const mockTitle = {
  title: 'EXCLUSIVE OFFERS',
  subtitle: 'Ïã†Í∑ú Îü∞Ïπ≠ ÏµúÏ†ÄÍ∞Ä ÌäπÍ∞Ä ÌÉÄÏûÑÎîú',
  moreUrl: '#',
};

interface UnitCaseProps {
  params: {
    type: 'test' | 'title' | 'vertical' | 'horizontal';
  };
}

export default function UnitCase({ params }: UnitCaseProps) {
  const [wishlistIds, setWishlistIds] = useState<(string | number)[]>(['case-1', 'case-3']);

  const handleWishlistToggle = (productId: string | number, isActive: boolean) => {
    setWishlistIds((prev) =>
      isActive ? [...new Set([...prev, productId])] : prev.filter((id) => id !== productId)
    );
  };

  if (params.type === 'vertical') {
    return (
      <>
        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíà Ïú†Îãõ (ÏÑ∏Î°úÌòï)" />
        <ProdCardList
          data={mockProdCase}
          columns={3}
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíàÏú†Îãõ(ÏÑ∏Î°ú)_3Ïó¥" />
        <ProdCardList
          data={mockProdCase.slice(0, 6)}
          columns={3}
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíàÏú†Îãõ(ÏÑ∏Î°ú)_2.5Ïó¥" />
        <ProdCardList
          data={mockProdCase.slice(0, 6)}
          variant="swiper"
          columns={2.5}
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíàÏú†Îãõ(ÏÑ∏Î°ú)_2Ïó¥" />
        <ProdCardList
          data={mockProdCase.slice(0, 4)}
          columns={2}
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíàÏú†Îãõ(ÏÑ∏Î°ú)_1.5Ïó¥" />
        <ProdCardList
          data={mockProdCase.slice(0, 4)}
          variant="swiper"
          columns={1.5}
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíàÏú†Îãõ(ÏÑ∏Î°ú)_1Ïó¥" />
        <ProdCardList
          data={mockProdCase.slice(0, 2)}
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />
      </>
    );
  }

  if (params.type === 'horizontal') {
    return (
      <>
        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíà Ïú†Îãõ (Í∞ÄÎ°úÌòï)" />
        <ProdCardList
          data={mockProdCase}
          cardType="horizontal"
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíàÏú†Îãõ(Í∞ÄÎ°ú)_ÏÜåÌòï" />
        <ProdCardList
          data={mockProdCase.slice(0, 2)}
          cardType="horizontal"
          cardSize="small"
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ ÏÉÅÌíàÏú†Îãõ(Í∞ÄÎ°ú)_ÏÜåÌòï_Îã®Ï∂ïÌòï" />
        <ProdCardList
          data={mockProdSimpleCase.slice(0, 4)}
          cardType="horizontal"
          cardSize="small"
        />

        <TitleBar title="üîñ Î™®ÎìàÏ†ïÏùò - ÏÉÅÌíàÏú†Îãõ(Í∞ÄÎ°ú)_Ï§ëÌòï" />
        <ProdCardList
          data={mockProdCase.slice(0, 2)}
          cardType="horizontal"
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />

        <TitleBar title="üîñ ÏÉÅÌíàÏú†Îãõ(Í∞ÄÎ°ú)_Ï§ëÌòï_Îã®Ï∂ïÌòï" />
        <ProdCardList
          data={mockProdSimpleCase.slice(0, 4)}
          variant="swiper"
          cardType="horizontal"
          columns={1.1}
        />

        <TitleBar title="üîñ ÏÉÅÌíàÏú†Îãõ(Í∞ÄÎ°ú)_Ï§ëÌòï_Î∞ïÏä§" />
        <ProdCardList
          data={mockProdCase.slice(0, 4)}
          cardType="horizontal"
          cardVariant="boxed"
          wishlist={{ activeIds: wishlistIds, onToggle: handleWishlistToggle }}
        />
      </>
    );
  }

  if (params.type === 'test') {
    return (
      <>
        <ProdCard
          {...mockProdCards[0]}
          gem={{
            isActive: wishlistIds.includes(mockProdCards[0].id),
            onChange: handleWishlistToggle,
          }}
        />
        <ProdCard
          {...mockProdCards[1]}
          isSoldOut
          gem={{
            isActive: wishlistIds.includes(mockProdCards[1].id),
            onChange: handleWishlistToggle,
          }}
        />
        <ProdCard
          type="horizontal"
          variant="inverse"
          {...mockProdCards[3]}
          gem={{
            isActive: wishlistIds.includes(mockProdCards[3].id),
            onChange: handleWishlistToggle,
          }}
        />

        <br />
        <br />

        <div style={{ padding: '1rem', background: '#222' }}>
          <ProdCard
            variant="inverse"
            {...mockProdCards[2]}
            isSoldOut
            gem={{
              isActive: wishlistIds.includes(mockProdCards[2].id),
              onChange: handleWishlistToggle,
            }}
          />
          <ProdCard
            type="horizontal"
            variant="inverse"
            {...mockProdCards[3]}
            gem={{
              isActive: wishlistIds.includes(mockProdCards[3].id),
              onChange: handleWishlistToggle,
            }}
          />
        </div>
      </>
    );
  }

  return null;
}
